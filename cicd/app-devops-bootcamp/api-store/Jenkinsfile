pipeline {
  environment {
    registry = "jgraziano/webdemo"
    registryCredential = 'dockerhub_id'
    dockerImage = ''
  }
  parameters {
    string(name: 'WORKPLACE', description: 'workplace environment')
  }
  
  agent any
  
  stages {

    //Empieza Test
    stage('Test') {
      steps {
        script {
          nodejs(nodeJSInstallationName: "nodejs_for_test"){
            echo 'Testing app for building stage...'
            echo "WORKPLACE: ${params.WORKPLACE}"
            git branch: 'master', url: 'https://github.com/edgaregonzalez/app-devops-bootcamp'  
            sh """
            pwd
            ls
            cd api-store
            curl -LJO https://raw.githubusercontent.com/joaquingraziano/ci-jenkins/master/cicd/app-devops-bootcamp/api-store/Dockerfile
            npm install
            npm run test
            """
          }
        }
      }
    }
    
    
    //Finaliza test
    
    //Inicia Stage Build
    stage('build Image') {
      steps {
        echo 'Haciendo el Build de la app'
        script {
          dir('api-store') {
            docker.build registry + ":v1.$BUILD_NUMBER"
          }
        }
      } 
    }
    
    //Finaliza Stage Build
    
    // Agregado Stage Snyk Scan
    stage('Snyk Scan') {
      steps {
        withCredentials([string(credentialsId: 'snyktoken', variable: 'SNYK_TOKEN')]) {
        sh 'snyk auth $SNYK_TOKEN'
        sh "snyk container test $registry:v1.$BUILD_NUMBER --json --severity-threshold=high > snyk_report.json || true"
        }
      }
    }
    

    // Agregado Stage Snyk Issue
    stage('Snyk Issue') {
      steps {
        script {
          def report = readJSON file: 'snyk_report.json'
          report.vulnerabilities.each { vuln ->
            def issueTitle = "Snyk Issue: ${vuln.id}"
            def issueDescription = "Vulnerabilidad encontrada: ${vuln.id}"
            withCredentials([string(credentialsId: 'token-github', variable: 'GITHUB_TOKEN')]) {
              sh "curl -X POST -H 'Content-Type: application/json' -H 'Authorization: token ${GITHUB_TOKEN}' -d '{\"title\":\"${issueTitle}\", \"body\":\"${issueDescription}\", \"labels\":[\"Seguridad\"]}' https://api.github.com/repos/Jiolloker/webdemo/issues"
            }
          }
        }
      }
    }
    
    //Inicia Stage Push
    stage('Push Image') {
      when {
        expression {
          def report = readJSON file: 'snyk_report.json'
          return !report.vulnerabilities.any { it.severity == "high" }
        }
      }
      steps {
        echo 'Haciendo un Push a la registry de docker'
        script {
          docker.withRegistry('https://registry.hub.docker.com/', 'dockerhub_id') {
          docker.image("jgraziano/webdemo:v1.$BUILD_NUMBER").push()
          }
        }
      }
    }
    //Finaliza Stage Push

  


    stage('Update Deployment') {
      when {
        expression {
          def report = readJSON file: 'snyk_report.json'
          return !report.vulnerabilities.any { it.severity == "high" }
        }
      }
      steps {
        script {
          // Clone GitHub repo
          git branch: 'main', url: 'https://github.com/joaquingraziano/argocd'  
          // Cambia el nombre del repo
          // Update Deployment
          sh "chmod u+w ${params.WORKPLACE}/app/deployment.yml"
          def deploymentFile = "${params.WORKPLACE}/app/deployment.yml"
          def deploymentContent = readFile(deploymentFile)
          def updatedDeploymentContent = deploymentContent.replaceAll('jgraziano/webdemo:v1.*', "jgraziano/webdemo:v1.${"$BUILD_NUMBER"}")
          writeFile file: deploymentFile, text: updatedDeploymentContent
          sh "cat ${params.WORKPLACE}/app/deployment.yml"

          // Push changes to GitHub
          withCredentials([gitUsernamePassword(credentialsId: 'github_id', gitToolName: 'git-tool')]){
            sh """
            git config --global user.email "jgraziano@example.com"
            git config --global user.name "jgraziano"
            git status
            git add -v "${params.WORKPLACE}/app/deployment.yml"
            git commit -v -m 'Update deployment of ${params.WORKPLACE} with build number v1.$BUILD_NUMBER'
            git push origin main
            """
          }
        }
      }
    }
  }
  post {
    always {
      //limpia imagenes
      echo 'Se limpian las imagenes pusheadas'
      sh "docker rmi $registry:v1.$BUILD_NUMBER"
      sh "docker rmi registry.hub.docker.com/$registry:v1.$BUILD_NUMBER"
    }
  }
}